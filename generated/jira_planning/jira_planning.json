{
    "epics": [
        {
            "id": "EPIC-1",
            "name": "User Authentication and Registration",
            "description": "Development of a robust user authentication and registration system for Tuition Central, including registration, login, and account management features with support for traditional and third-party authentication.",
            "priority": "High",
            "child_issues": [
                {
                    "story_id": "US-1.1",
                    "name": "User Registration",
                    "description": "As a new user, I want to register with my email address so that I can create an account on Tuition Central.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "User can register using email, full name, and password.",
                        "User can choose account type during registration.",
                        "Duplicate email addresses are not allowed.",
                        "A welcome/verification email is sent upon registration."
                    ],
                    "technical_notes": [
                        "Ensure integration with Google and Facebook OIDC services.",
                        "Utilize proper indexing for email and user ID."
                    ],
                    "assignee": null,
                    "estimated_hours": 40.0,
                    "linked_issues": [
                        "Task-1.1.1",
                        "Task-1.1.2",
                        "Task-1.1.3",
                        "Task-1.1.4",
                        "Task-1.1.5",
                        "Task-1.1.6",
                        "Task-1.1.7"
                    ]
                },
                {
                    "task_id": "Task-1.1.1",
                    "name": "Design Registration Form",
                    "description": "Design registration form fields including email, full name, password, and account type choice.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Form layout is user-friendly and responsive.",
                        "Form includes fields for email, full name, password, and account type."
                    ],
                    "technical_notes": [
                        "Follow UX/UI best practices."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": []
                },
                {
                    "task_id": "Task-1.1.2",
                    "name": "Integrate OIDC Authentication",
                    "description": "Integrate OpenID Connect authentication options for Google and Facebook.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Users can opt to register via Google or Facebook.",
                        "OIDC integration is secure and reliable."
                    ],
                    "technical_notes": [
                        "Ensure API keys are securely stored."
                    ],
                    "assignee": null,
                    "estimated_hours": 10.0,
                    "linked_issues": []
                },
                {
                    "task_id": "Task-1.1.3",
                    "name": "Email Format Validation and Duplicate Check",
                    "description": "Implement email format validation and ensure no duplicate emails in the system.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Emails are validated for correct format.",
                        "System checks for duplicate emails before registration."
                    ],
                    "technical_notes": [
                        "Use regex for email validation.",
                        "Implement database constraints for uniqueness."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": []
                },
                {
                    "task_id": "Task-1.1.4",
                    "name": "Generate Unique User ID",
                    "description": "Generate a unique user ID and store user details in the Registration table.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Each user receives a unique ID upon registration.",
                        "User details are accurately stored in the database."
                    ],
                    "technical_notes": [
                        "Use UUID for user ID generation."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": []
                },
                {
                    "task_id": "Task-1.1.5",
                    "name": "Set User Type and Status",
                    "description": "Set the user type and status to 'active' upon registration.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Users are assigned the correct type and status automatically."
                    ],
                    "technical_notes": [
                        "Ensure status logic covers all user scenarios."
                    ],
                    "assignee": null,
                    "estimated_hours": 2.0,
                    "linked_issues": []
                },
                {
                    "task_id": "Task-1.1.6",
                    "name": "Send Welcome/Verification Email",
                    "description": "Send a welcome and verification email to the userâ€™s address upon registration.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Emails are sent promptly and contain necessary information."
                    ],
                    "technical_notes": [
                        "Use a third-party API for reliable email delivery."
                    ],
                    "assignee": null,
                    "estimated_hours": 3.0,
                    "linked_issues": []
                },
                {
                    "task_id": "Task-1.1.7",
                    "name": "Implement Password Hashing",
                    "description": "Implement password hashing and secure OAuth tokens storage.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Passwords are securely hashed and stored.",
                        "OAuth tokens are stored securely."
                    ],
                    "technical_notes": [
                        "Use bcrypt for password hashing.",
                        "Store tokens in encrypted format."
                    ],
                    "assignee": null,
                    "estimated_hours": 10.0,
                    "linked_issues": []
                },
                {
                    "story_id": "US-1.2",
                    "name": "User Login",
                    "description": "As a returning user, I want to log in with my credentials so that I can access my account.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Users can log in using their credentials or through OIDC.",
                        "Login form includes CSRF protection.",
                        "Successful logins redirect users to their respective dashboards."
                    ],
                    "technical_notes": [
                        "Ensure login supports session persistence.",
                        "Utilize JWT for session management."
                    ],
                    "assignee": null,
                    "estimated_hours": 30.0,
                    "linked_issues": [
                        "Task-1.2.1",
                        "Task-1.2.2",
                        "Task-1.2.3",
                        "Task-1.2.4",
                        "Task-1.2.5"
                    ]
                },
                {
                    "task_id": "Task-1.2.1",
                    "name": "Develop Login Form",
                    "description": "Develop login form with options for email/password login and OIDC options, including CSRF protection.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Login form is user-friendly and secure.",
                        "Form includes options for traditional and OIDC login."
                    ],
                    "technical_notes": [
                        "CSRF tokens are implemented."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": []
                },
                {
                    "task_id": "Task-1.2.2",
                    "name": "Validate Credentials",
                    "description": "Validate credentials against stored data with rate limiting and account lockout logic.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Credentials are verified accurately and securely.",
                        "System supports rate limiting and account lockout."
                    ],
                    "technical_notes": [
                        "Implement failed login attempt tracking."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": []
                },
                {
                    "task_id": "Task-1.2.3",
                    "name": "Create User Session",
                    "description": "Create a session for the user using JWT or a session-based method.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Sessions are created and persist across browser sessions if 'Remember me' is selected."
                    ],
                    "technical_notes": [
                        "Follow secure session handling practices."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": []
                },
                {
                    "task_id": "Task-1.2.4",
                    "name": "Redirect User to Dashboard",
                    "description": "Redirect user to the appropriate dashboard based on user type after login.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Users are redirected to correct dashboards post-login."
                    ],
                    "technical_notes": [
                        "Ensure smooth redirect process."
                    ],
                    "assignee": null,
                    "estimated_hours": 2.0,
                    "linked_issues": []
                },
                {
                    "task_id": "Task-1.2.5",
                    "name": "Implement 'Remember Me' and Password Reset",
                    "description": "Implement 'Remember me' feature and include password reset functionality.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "'Remember me' maintains user session across browser restarts.",
                        "Users can request a password reset link via email."
                    ],
                    "technical_notes": [
                        "Follow best practices for password reset security."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": []
                }
            ]
        },
        {
            "id": "EPIC-2",
            "name": "Requester Functionality",
            "description": "Implementation of functionality for requesters to manage tuition requests and engage tutors.",
            "priority": "High",
            "child_issues": [
                {
                    "story_id": "US-2.1",
                    "name": "Create Tuition Request",
                    "description": "As a requester, I want to create a tuition request so that I can find suitable tutors.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Tuition request form is successfully submitted.",
                        "Form includes fields for subject, education level, fee, location, and time slots.",
                        "Unique request ID is generated with default status 'open'."
                    ],
                    "technical_notes": [
                        "Utilize geolocation API for location field.",
                        "Ensure backend supports unique request ID creation."
                    ],
                    "assignee": null,
                    "estimated_hours": 25.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.1.1",
                    "name": "Build Tuition Request Form",
                    "description": "Build tuition request form with fields for subject, education level, fee, location (geolocation assistance), and multiple time slots.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Form layout is complete and usable.",
                        "Geolocation assistance works correctly."
                    ],
                    "technical_notes": [
                        "Use HTML5 input types and JavaScript for geolocation."
                    ],
                    "assignee": null,
                    "estimated_hours": 8.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.1.2",
                    "name": "Implement Calendar/Time Picker",
                    "description": "Implement calendar/time picker and input validations (e.g., no past dates).",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Date picker does not allow past dates.",
                        "Time slots can be selected without overlap."
                    ],
                    "technical_notes": [
                        "Leverage existing JavaScript libraries for date/time picking."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.1.3",
                    "name": "Generate Unique Request ID",
                    "description": "Generate and assign a unique request ID and default status 'open'.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Unique ID is generated for each request.",
                        "Request status defaults to 'open' upon creation."
                    ],
                    "technical_notes": [
                        "Ensure ID uniqueness in the database."
                    ],
                    "assignee": null,
                    "estimated_hours": 4.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.1.4",
                    "name": "Enable Draft Saving",
                    "description": "Enable draft saving for incomplete requests.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Drafts can be saved and resumed by the user.",
                        "Partial data is preserved."
                    ],
                    "technical_notes": [
                        "Use local storage or session for draft saving."
                    ],
                    "assignee": null,
                    "estimated_hours": 8.0,
                    "linked_issues": []
                },
                {
                    "story_id": "US-2.2",
                    "name": "View Tuition Requests",
                    "description": "As a requester, I want to view all my tuition requests so that I can manage them.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Requests are displayed in a dashboard view.",
                        "Functionality for editing, canceling, and archiving exists."
                    ],
                    "technical_notes": [],
                    "assignee": null,
                    "estimated_hours": 30.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.2.1",
                    "name": "Design Request Dashboard",
                    "description": "Design dashboard to list requests with key info (subject, status, date created).",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Dashboard displays requests with accurate information."
                    ],
                    "technical_notes": [
                        "Ensure information is pulled in real-time from the database."
                    ],
                    "assignee": null,
                    "estimated_hours": 10.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.2.2",
                    "name": "Implement Pagination and Sorting",
                    "description": "Implement pagination, sorting, filtering, and detailed view for each request.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Dashboard can paginate and filter requests.",
                        "Detailed view is accessible for every request."
                    ],
                    "technical_notes": [
                        "Consider server-side rendering for efficiency."
                    ],
                    "assignee": null,
                    "estimated_hours": 10.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.2.3",
                    "name": "Add Edit/Cancel Functions",
                    "description": "Add edit/cancel functions for requests with status 'open' and archive for completed ones.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Users can edit/cancel open requests.",
                        "Completed requests can be archived."
                    ],
                    "technical_notes": [
                        "Ensure backend supports changes."
                    ],
                    "assignee": null,
                    "estimated_hours": 10.0,
                    "linked_issues": []
                },
                {
                    "story_id": "US-2.3",
                    "name": "Search for Matching Tutors",
                    "description": "As a requester, I want to search for matching tutors so that I can offer them tuition opportunities.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Search functionality finds matching tutors based on criteria.",
                        "Search results are interactive and manageable."
                    ],
                    "technical_notes": [
                        "Optimize search with proper database indexing."
                    ],
                    "assignee": null,
                    "estimated_hours": 35.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.3.1",
                    "name": "Implement Search Functionality",
                    "description": "Implement search functionality based on criteria (education level, subject, fee, expertise, etc).",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Search results appear based on user-input criteria.",
                        "Search results are relevant and accurate."
                    ],
                    "technical_notes": [
                        "Use SQL indexing to improve search speed."
                    ],
                    "assignee": null,
                    "estimated_hours": 10.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.3.2",
                    "name": "Develop Tutor Result List",
                    "description": "Develop tutor result list with pagination, sorting, and filtering options.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Results can be paginated and sorted.",
                        "Filtering options allow for precise searches."
                    ],
                    "technical_notes": [
                        "Ensure frontend supports dynamic updates."
                    ],
                    "assignee": null,
                    "estimated_hours": 15.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.3.3",
                    "name": "Improve and Handle Empty Results",
                    "description": "Incorporate suggestions for improving match results and handle empty results gracefully.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Suggestions are provided for no matches.",
                        "User experience remains smooth with empty results."
                    ],
                    "technical_notes": [
                        "Provide alternate suggestions or redirects."
                    ],
                    "assignee": null,
                    "estimated_hours": 10.0,
                    "linked_issues": []
                },
                {
                    "story_id": "US-2.4",
                    "name": "Send Offers to Tutors",
                    "description": "As a requester, I want to send offers to selected tutors so that I can engage their services.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Multi-select functionality for tutors is operational.",
                        "Offers are correctly sent and recorded."
                    ],
                    "technical_notes": [
                        "Integrate with messaging system."
                    ],
                    "assignee": null,
                    "estimated_hours": 20.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.4.1",
                    "name": "Enable Multi-select and Send Offer",
                    "description": "Enable multi-select for tutors from search results, activate 'Send Offer' button upon selection.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Users can select multiple tutors.",
                        "Offers are sent via 'Send Offer' button."
                    ],
                    "technical_notes": [
                        "Integrate with UI and backend messaging systems."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.4.2",
                    "name": "Add Confirmation and Messaging",
                    "description": "Add confirmation dialog and messaging option with offer details.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Confirmation dialog appears before sending offers.",
                        "Messages include all necessary offer details."
                    ],
                    "technical_notes": [],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.4.3",
                    "name": "Create Offer Entries",
                    "description": "Create offer entries with status 'new' in the Offer table.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Offer entries are created in the Offer table with status 'new'."
                    ],
                    "technical_notes": [
                        "Ensure table accommodates all necessary data fields."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-2.4.4",
                    "name": "Integrate Transaction and Notification",
                    "description": "Integrate transaction handling and notification queue.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Transactions are processed securely.",
                        "Notifications are queued and delivered reliably."
                    ],
                    "technical_notes": [
                        "Use message queues for notification delivery."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": []
                }
            ]
        },
        {
            "id": "EPIC-3",
            "name": "Tutor Functionality",
            "description": "Development of functionality for tutors to create profiles, manage offers, and accept tuition opportunities.",
            "priority": "High",
            "child_issues": [
                {
                    "story_id": "STORY-3.1",
                    "name": "Tutor Profile Creation",
                    "description": "As a tutor, I want to create my profile so that I can be matched with appropriate tuition requests.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Profile form includes multi-select for subjects and education levels",
                        "Numeric fields for experience, student scores",
                        "Range selector for fee expectations",
                        "Optional fields for qualifications, certifications, teaching approach,profile picture, availability calendar",
                        "Preview feature and profile completion indicator",
                        "Secure file uploads with save/publish options"
                    ],
                    "technical_notes": [
                        "Integrate with user management system",
                        "Ensure all fields are validated before submission"
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-3.1.1",
                    "name": "Build Tutor Profile Form",
                    "description": "Build tutor profile form with required fields.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Includes multi-select for subjects and education levels",
                        "Numeric fields for experience and student scores",
                        "Range selector for fee expectations"
                    ],
                    "technical_notes": [
                        "Use React.js for form development",
                        "Ensure responsive design"
                    ],
                    "assignee": null,
                    "estimated_hours": 12.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-3.1.2",
                    "name": "Implement Optional Fields",
                    "description": "Implement optional fields like qualifications and certifications.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Includes qualifications, certifications, teaching approach, profile picture upload, availability calendar"
                    ],
                    "technical_notes": [
                        "Profile picture upload should support PNG and JPEG",
                        "Calendar should integrate with Google Calendar"
                    ],
                    "assignee": null,
                    "estimated_hours": 10.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-3.1.3",
                    "name": "Calculate Expertise Level",
                    "description": "Calculate expertise level from student scores.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Dynamic display based on student score input"
                    ],
                    "technical_notes": [
                        "Use a linear scale for expertise calculation"
                    ],
                    "assignee": null,
                    "estimated_hours": 8.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-3.1.4",
                    "name": "Develop Preview Feature",
                    "description": "Develop preview and completion indicator for profiles.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Preview matches actual profile display",
                        "Profile completion percentage dynamically updates"
                    ],
                    "technical_notes": [
                        "Utilize CSS for completion bar"
                    ],
                    "assignee": null,
                    "estimated_hours": 8.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-3.1.5",
                    "name": "Ensure Secure File Uploads",
                    "description": "Ensure secure file uploads with save/publish options.",
                    "status": "TODO",
                    "priority": "Critical",
                    "acceptance_criteria": [
                        "Uploads are encrypted before being sent to server",
                        "Files are accessible only to authorized users"
                    ],
                    "technical_notes": [
                        "Use AWS S3 for storage"
                    ],
                    "assignee": null,
                    "estimated_hours": 10.0,
                    "linked_issues": []
                },
                {
                    "story_id": "STORY-3.2",
                    "name": "Manage Offers",
                    "description": "As a tutor, I want to view and manage offers so that I can accept tuition opportunities.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Dashboard lists all offers with filters",
                        "Offer details displayed with map view",
                        "Sorting and batch actions available"
                    ],
                    "technical_notes": [
                        "Integrate with offer creation system",
                        "Use Google Maps API for location"
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-3.2.1",
                    "name": "Design Offer Dashboard",
                    "description": "Design dashboard for listing offers with filters.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Dashboard with new, notified, accepted, declined filters"
                    ],
                    "technical_notes": [
                        "Use Angular for frontend",
                        "Must be mobile-friendly"
                    ],
                    "assignee": null,
                    "estimated_hours": 14.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-3.2.2",
                    "name": "Display Offer Details",
                    "description": "Display offer details and include map view for location.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Details must include requester name, subject, fee, location, timeslot, start date"
                    ],
                    "technical_notes": [
                        "Integrate Google Maps API for location view"
                    ],
                    "assignee": null,
                    "estimated_hours": 10.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-3.2.3",
                    "name": "Add Sorting and Batch Selection",
                    "description": "Add sorting, batch selection, and request more details option.",
                    "status": "TODO",
                    "priority": "Low",
                    "acceptance_criteria": [
                        "Sorting based on fee and date",
                        "Batch actions allowed"
                    ],
                    "technical_notes": [
                        "Implement with Redux for state management"
                    ],
                    "assignee": null,
                    "estimated_hours": 8.0,
                    "linked_issues": []
                },
                {
                    "story_id": "STORY-3.3",
                    "name": "Accept Offers",
                    "description": "As a tutor, I want to accept offers so that I can confirm tuition arrangements.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Offers can be accepted with confirmation dialog",
                        "Statuses updated correctly",
                        "Notification sent to requester"
                    ],
                    "technical_notes": [
                        "Handle race conditions with optimistic locking",
                        "Log all actions for audit purposes"
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-3.3.1",
                    "name": "Implement Offer Acceptance",
                    "description": "Implement offer acceptance with multi-select and confirmation dialog.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Multi-select available",
                        "Confirmation dialog required"
                    ],
                    "technical_notes": [
                        "Ensure atomicity in acceptance process"
                    ],
                    "assignee": null,
                    "estimated_hours": 10.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-3.3.2",
                    "name": "Update Request and Offer Status",
                    "description": "Update request status to 'accepted' and log timestamp.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Statuses must reflect on dashboard",
                        "Timestamp must be captured accurately"
                    ],
                    "technical_notes": [
                        "Ensure status update is idempotent"
                    ],
                    "assignee": null,
                    "estimated_hours": 8.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-3.3.3",
                    "name": "Handle Race Conditions and Logging",
                    "description": "Implement race condition handling and audit logging.",
                    "status": "TODO",
                    "priority": "Critical",
                    "acceptance_criteria": [
                        "Concurrency issues must be resolved",
                        "All actions are logged"
                    ],
                    "technical_notes": [
                        "Use database transactions for consistency"
                    ],
                    "assignee": null,
                    "estimated_hours": 12.0,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-3.3.4",
                    "name": "Facilitate Contact Exchange",
                    "description": "Facilitate contact details exchange and send notifications.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Secure contact exchange implemented",
                        "Requester notified immediately"
                    ],
                    "technical_notes": [
                        "Integrate with Twilio for notifications"
                    ],
                    "assignee": null,
                    "estimated_hours": 8.0,
                    "linked_issues": []
                }
            ]
        },
        {
            "id": "EPIC-4",
            "name": "Notification System",
            "description": "Implementation of a notification system to alert tutors about new offers promptly via email and in-app notifications.",
            "priority": "High",
            "child_issues": [
                {
                    "story_id": "US-4.1",
                    "name": "System Administrator Notifications",
                    "description": "As a system administrator, I want the system to send notifications to tutors about new offers so that they can respond promptly.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Notifications sent within 5 minutes of offer creation",
                        "Email content includes offer details and direct link",
                        "Offer status updated to 'notified'"
                    ],
                    "technical_notes": [
                        "Utilize a background service to scan for new offers.",
                        "Emails sent via a message queue.",
                        "Implement logging and retry mechanisms."
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-4.1.1",
                    "name": "Develop Background Service",
                    "description": "Develop a background service that runs every 5 minutes to scan for 'new' offers.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Service runs every 5 minutes",
                        "Correctly identifies 'new' offers"
                    ],
                    "technical_notes": [
                        "Consider performance impacts of frequent scans.",
                        "Ensure service is scalable."
                    ],
                    "assignee": null,
                    "estimated_hours": 8.0,
                    "linked_issues": [
                        "US-4.1"
                    ]
                },
                {
                    "task_id": "TASK-4.1.2",
                    "name": "Generate Tailored Email Content",
                    "description": "Generate tailored email content with offer details and direct link.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Emails include offer details",
                        "Direct link to offer included"
                    ],
                    "technical_notes": [
                        "Utilize template system for emails."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": [
                        "US-4.1"
                    ]
                },
                {
                    "task_id": "TASK-4.1.3",
                    "name": "Send Email Notifications",
                    "description": "Send email notifications using a message queue; update offer status to 'notified' post sending.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Emails sent through message queue",
                        "Offer status updated"
                    ],
                    "technical_notes": [
                        "Reliable email service integration.",
                        "Implement rate limiting."
                    ],
                    "assignee": null,
                    "estimated_hours": 6.0,
                    "linked_issues": [
                        "US-4.1"
                    ]
                },
                {
                    "task_id": "TASK-4.1.4",
                    "name": "Log and Implement Retry Mechanisms",
                    "description": "Log success/failure and implement retry and rate limiting mechanisms.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Failures logged appropriately",
                        "Retries and rate limits configured"
                    ],
                    "technical_notes": [
                        "Ensure logs are accessible for diagnosis."
                    ],
                    "assignee": null,
                    "estimated_hours": 7.0,
                    "linked_issues": [
                        "US-4.1"
                    ]
                },
                {
                    "story_id": "US-4.2",
                    "name": "Tutor Notifications",
                    "description": "As a tutor, I want to receive notifications about new offers so that I can respond in a timely manner.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Notifications include requester details and offer specifics",
                        "Secure token included for quick acceptance"
                    ],
                    "technical_notes": [
                        "Templates for email and in-app notifications.",
                        "Security tokens for email links."
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-4.2.1",
                    "name": "Design Email and In-App Notification",
                    "description": "Design email template and in-app notification center for offer alerts.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Templates designed and approved",
                        "Templates cover all necessary details"
                    ],
                    "technical_notes": [
                        "Ensure consistency across email and app notifications."
                    ],
                    "assignee": null,
                    "estimated_hours": 10.0,
                    "linked_issues": [
                        "US-4.2"
                    ]
                },
                {
                    "task_id": "TASK-4.2.2",
                    "name": "Include Offer Details in Notifications",
                    "description": "Include requester details, subject, education level, general location, fee, and timeslots in the notification.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "All necessary details included in notifications"
                    ],
                    "technical_notes": [
                        "Use robust template handling."
                    ],
                    "assignee": null,
                    "estimated_hours": 5.0,
                    "linked_issues": [
                        "US-4.2"
                    ]
                },
                {
                    "task_id": "TASK-4.2.3",
                    "name": "Provide Call-to-Action in Email",
                    "description": "Provide direct call-to-action in the email with a secure token for quick acceptance.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "CTA with secure token included",
                        "Emails are actionable"
                    ],
                    "technical_notes": [
                        "Token system must be secure and reliable."
                    ],
                    "assignee": null,
                    "estimated_hours": 4.0,
                    "linked_issues": [
                        "US-4.2"
                    ]
                },
                {
                    "task_id": "TASK-4.2.4",
                    "name": "Manage Notification Preferences",
                    "description": "Allow tutors to manage notification preferences for frequency and channels.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Notification preferences are customizable"
                    ],
                    "technical_notes": [
                        "Implement user settings page for preferences."
                    ],
                    "assignee": null,
                    "estimated_hours": 6.0,
                    "linked_issues": [
                        "US-4.2"
                    ]
                }
            ]
        },
        {
            "id": "EPIC-5",
            "name": "Match-making System",
            "description": "Development of a system to match requesters with tutors based on specified criteria.",
            "priority": "High",
            "child_issues": [
                {
                    "story_id": "STORY-5.1",
                    "name": "Admin Match-making Criteria",
                    "description": "As a system administrator, I want the system to match requesters with tutors based on specified criteria so that appropriate connections are made.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "The system matches requesters with tutors based on education level, subject compatibility, fee range, expertise level, and optionally location/availability.",
                        "Matching results are sorted based on a relevance score and paginated.",
                        "Performance metrics are collected and edge case scenarios are handled.",
                        "Algorithm parameters are configurable without code changes."
                    ],
                    "technical_notes": [
                        "Utilize efficient indexing and caching to enhance performance.",
                        "Design must enable horizontal scaling."
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": [
                        "TASK-5.1.1",
                        "TASK-5.1.2",
                        "TASK-5.1.3",
                        "TASK-5.1.4"
                    ]
                },
                {
                    "task_id": "TASK-5.1.1",
                    "name": "Match-making Algorithm",
                    "description": "Design and implement a matching algorithm that considers education level, subject compatibility, fee range, expertise level, and optionally location/availability.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Algorithm incorporates all specified criteria in matching."
                    ],
                    "technical_notes": [
                        "Design should accommodate future additional criteria."
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-5.1.2",
                    "name": "Sort and Paginate Matches",
                    "description": "Sort matches based on a relevance score and implement pagination for results.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Matches are sorted by a relevance score.",
                        "Results can be navigated via pagination."
                    ],
                    "technical_notes": [
                        "Consider using a scalable database for handling large datasets."
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-5.1.3",
                    "name": "Performance Metrics and Edge Cases",
                    "description": "Include performance metrics collection and handle edge case scenarios (no matches, too many matches).",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Collect meaningful performance data.",
                        "System handles no match scenarios gracefully.",
                        "System efficiently manages scenarios with too many matches."
                    ],
                    "technical_notes": [
                        "Ensure low latency in high-load situations."
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-5.1.4",
                    "name": "Configurable Algorithm Parameters",
                    "description": "Configure algorithm parameters to be tunable without code changes.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "System allows non-developer users to adjust algorithm parameters."
                    ],
                    "technical_notes": [
                        "Implement a user-friendly interface for parameter tuning."
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": []
                },
                {
                    "story_id": "STORY-5.2",
                    "name": "Match Quality Indicators",
                    "description": "As a requester or tutor, I want to see match quality indicators so that I can make informed decisions.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Match percentage and visual indicators are displayed to users.",
                        "Explanations for match results are provided, including mismatches or compromises.",
                        "Feedback loops are integrated for algorithm improvement and historical success rates are visible."
                    ],
                    "technical_notes": [
                        "Focus on a clear and intuitive user interface design."
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": [
                        "TASK-5.2.1",
                        "TASK-5.2.2",
                        "TASK-5.2.3"
                    ]
                },
                {
                    "task_id": "TASK-5.2.1",
                    "name": "Develop Match Scoring System",
                    "description": "Develop a match scoring system that calculates a match percentage with visual indicators.",
                    "status": "TODO",
                    "priority": "High",
                    "acceptance_criteria": [
                        "Match score accurately reflects compatibility.",
                        "Visual indicators are intuitive to users."
                    ],
                    "technical_notes": [
                        "Ensure the scoring algorithm is easy to adjust based on feedback."
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-5.2.2",
                    "name": "Match Explanation and Highlighting",
                    "description": "Provide explanations behind the match results and highlight mismatches or compromises.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "Users can view detailed explanations of matches.",
                        "Mismatches are clearly highlighted."
                    ],
                    "technical_notes": [
                        "Design explanations to be easily understandable by non-technical users."
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": []
                },
                {
                    "task_id": "TASK-5.2.3",
                    "name": "Feedback Loops and Success Rates",
                    "description": "Integrate feedback loops for iterative algorithm improvement and display historical success rates.",
                    "status": "TODO",
                    "priority": "Medium",
                    "acceptance_criteria": [
                        "System collects user feedback for algorithm improvements.",
                        "Historical match success rates are accessible to users."
                    ],
                    "technical_notes": [
                        "Implement data analytics to support continuous improvement."
                    ],
                    "assignee": null,
                    "estimated_hours": null,
                    "linked_issues": []
                }
            ]
        }
    ]
}