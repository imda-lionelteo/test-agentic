[
    {
        "id": "STORY-1.1",
        "name": "User Registration",
        "description": "As a new user, I want to register with my email address so that I can create an account on Tuition Central.",
        "status": "TODO",
        "priority": "High",
        "acceptanceCriteria": "Registration form includes email, full name, and password; validates email format; checks for existing accounts; assigns unique user ID; sets user type based on registration path; sends welcome email.",
        "technicalNotes": "Implement password hashing, secure storage for OAuth tokens, and create database indexes.",
        "assignee": "",
        "estimatedHours": 10,
        "linkedIssues": []
    },
    {
        "id": "STORY-1.2",
        "name": "User Login",
        "description": "As a returning user, I want to log in with my credentials so that I can access my account.",
        "status": "TODO",
        "priority": "High",
        "acceptanceCriteria": "Login form accepts email and password or OIDC authentication; validates credentials; includes 'Remember me' option; provides password reset; redirects to appropriate dashboard.",
        "technicalNotes": "Implement JWT or session-based authentication, rate limiting, CSRF protection, and logging of authentication attempts.",
        "assignee": "",
        "estimatedHours": 10,
        "linkedIssues": []
    },
    {
        "id": "STORY-2.1",
        "name": "Create Tuition Request",
        "description": "As a requester, I want to create a tuition request so that I can find suitable tutors.",
        "status": "TODO",
        "priority": "High",
        "acceptanceCriteria": "Form includes address with geolocation, calendar/time picker for timeslots, education level dropdown, multi-select for subjects, tutor expertise selection, fee input with validation, start date picker, and draft saving.",
        "technicalNotes": "Implement client-side validations, geolocation API integration, and proper indexing for search optimization.",
        "assignee": "",
        "estimatedHours": 12,
        "linkedIssues": []
    },
    {
        "id": "STORY-2.2",
        "name": "Manage Tuition Requests",
        "description": "As a requester, I want to view all my tuition requests so that I can manage them effectively.",
        "status": "TODO",
        "priority": "High",
        "acceptanceCriteria": "Dashboard displays paginated list of requests with key details, status indicators, sorting, filtering, detailed view, edit, cancel, and archive functionalities.",
        "technicalNotes": "Optimize database queries and implement lazy loading for improved UI performance.",
        "assignee": "",
        "estimatedHours": 8,
        "linkedIssues": []
    },
    {
        "id": "STORY-2.3",
        "name": "Search for Matching Tutors",
        "description": "As a requester, I want to search for matching tutors so that I can identify potential candidates to send offers to.",
        "status": "TODO",
        "priority": "High",
        "acceptanceCriteria": "User can select an open request and trigger a search; results display tutor profiles with key details; feature supports pagination, sorting, and filtering; provides suggestions when few matches are found.",
        "technicalNotes": "Implement efficient search algorithm, caching for frequent searches, and consider fuzzy matching improvements.",
        "assignee": "",
        "estimatedHours": 10,
        "linkedIssues": []
    },
    {
        "id": "STORY-2.4",
        "name": "Send Offers to Tutors",
        "description": "As a requester, I want to send offers to selected tutors so that I can engage their services.",
        "status": "TODO",
        "priority": "High",
        "acceptanceCriteria": "Allow selection of multiple tutors via checkboxes; enable 'Send Offer' button after selection; confirm before sending; create offer entries with status 'new'; provide confirmation message and update Sent Offers section.",
        "technicalNotes": "Implement transaction handling, notification queue setup, and enforce maximum simultaneous offers per request.",
        "assignee": "",
        "estimatedHours": 9,
        "linkedIssues": []
    },
    {
        "id": "STORY-3.1",
        "name": "Create Tutor Profile",
        "description": "As a tutor, I want to create my profile so that I can be matched with appropriate tuition requests.",
        "status": "TODO",
        "priority": "Medium",
        "acceptanceCriteria": "Profile form includes multi-select for subjects and education levels, numeric fields for experience and achievements, fee range selector, optional qualifications upload, profile picture, and availability calendar; preview and publish functionalities provided.",
        "technicalNotes": "Implement secure file upload, scheduled tasks for recalculations, and version control for updates.",
        "assignee": "",
        "estimatedHours": 15,
        "linkedIssues": []
    },
    {
        "id": "STORY-3.2",
        "name": "Manage Received Offers",
        "description": "As a tutor, I want to view and manage offers so that I can evaluate and respond to tuition opportunities.",
        "status": "TODO",
        "priority": "Medium",
        "acceptanceCriteria": "Dashboard displays offers with filtering by status, detailed view of each offer, sorting options, batch selection, and distinction between new and viewed offers.",
        "technicalNotes": "Implement read receipts, integrate geolocation for distance info, and optimize database performance for large datasets.",
        "assignee": "",
        "estimatedHours": 10,
        "linkedIssues": []
    },
    {
        "id": "STORY-3.3",
        "name": "Accept Offers",
        "description": "As a tutor, I want to accept offers so that I can confirm tuition arrangements and proceed with the service.",
        "status": "TODO",
        "priority": "Medium",
        "acceptanceCriteria": "Allow selection of multiple offers; activate 'Accept' button upon selection; update request and offer status to 'accepted' with confirmation feedback, including audit logging and timestamp recording.",
        "technicalNotes": "Ensure data consistency with transactions, handle concurrency to avoid double acceptance, and log acceptance actions.",
        "assignee": "",
        "estimatedHours": 8,
        "linkedIssues": []
    },
    {
        "id": "STORY-4.1",
        "name": "Send Tutor Notifications",
        "description": "As a system administrator, I want the system to send notifications to tutors about new offers so that they can respond promptly.",
        "status": "TODO",
        "priority": "Medium",
        "acceptanceCriteria": "Background service runs periodically (every 5 minutes) to check for new offers; sends personalized email notifications with offer details and updates offer status to 'notified'.",
        "technicalNotes": "Implement message queues, email templates, retry mechanism, and logging for notification attempts.",
        "assignee": "",
        "estimatedHours": 10,
        "linkedIssues": []
    },
    {
        "id": "STORY-4.2",
        "name": "Receive Offer Notifications",
        "description": "As a tutor, I want to receive notifications about new offers so that I can respond to them in a timely fashion.",
        "status": "TODO",
        "priority": "Medium",
        "acceptanceCriteria": "Tutor receives email and in-app notifications with requester's name, subject, education level, general location, fee, timeslots, and start date; includes direct link to offer and call-to-action button.",
        "technicalNotes": "Implement secure tokens for direct actions from email, consider push notifications, and track email open/click rates.",
        "assignee": "",
        "estimatedHours": 8,
        "linkedIssues": []
    },
    {
        "id": "STORY-5.1",
        "name": "Match Requesters with Tutors",
        "description": "As a system administrator, I want the system to match requesters with tutors based on criteria so that appropriate connections are made.",
        "status": "TODO",
        "priority": "High",
        "acceptanceCriteria": "Matching algorithm considers education level, subject, fee compatibility, expertise, and optionally proximity and availability; returns paginated and sorted tutor profiles with performance metrics tracked.",
        "technicalNotes": "Implement efficient indexing, caching, and performance tracking; allow algorithm tuning without code changes.",
        "assignee": "",
        "estimatedHours": 15,
        "linkedIssues": []
    },
    {
        "id": "STORY-5.2",
        "name": "Display Match Quality Indicators",
        "description": "As a requester or tutor, I want to see match quality indicators so that I can make informed decisions about the suitability of matches.",
        "status": "TODO",
        "priority": "High",
        "acceptanceCriteria": "System calculates a match score, displays visual indicators, provides explanations for matching decisions, and shows historical success rates and suggestions for improvements.",
        "technicalNotes": "Design intuitive visual indicators, develop match quality algorithm, and implement a feedback loop for continuous improvement.",
        "assignee": "",
        "estimatedHours": 10,
        "linkedIssues": []
    }
]